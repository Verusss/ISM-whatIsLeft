/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Categories;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-07T20:12:02.978Z")

@Api(value = "categories", description = "the categories API")
@RequestMapping
public interface CategoriesApi {

    @ApiOperation(value = "Add a new category", nickname = "addCategory", notes = "", authorizations = {
        @Authorization(value = "whatIsLeft_auth", scopes = {
            @AuthorizationScope(scope = "read:items", description = "read your items"),
            @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Category is created"),
        @ApiResponse(code = 401, message = "Incorrect authorization provided"),
        @ApiResponse(code = 403, message = "Only admins can add categories"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/categories",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    public ResponseEntity<Void> addCategory(@ApiParam(value = "Category object that needs to be added to the store", required = true) @Valid @RequestBody Categories body);


    @ApiOperation(value = "Deletes an category", nickname = "deleteCategory", notes = "", authorizations = {
        @Authorization(value = "whatIsLeft_auth", scopes = {
            @AuthorizationScope(scope = "read:items", description = "read your items"),
            @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted correctly"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Incorrect authorization provided"),
        @ApiResponse(code = 403, message = "Only admin can delete category"),
        @ApiResponse(code = 404, message = "Category not found") })
    @RequestMapping(value = "/categories/{categoryId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    public ResponseEntity<Void> deleteCategory(@ApiParam(value = "Category id to delete", required = true) @PathVariable("categoryId") Long categoryId, @ApiParam(value = "") @RequestHeader(value = "api_key", required = false) String apiKey);


    @ApiOperation(value = "Get all categories", nickname = "getCategories", notes = "", authorizations = {
        @Authorization(value = "whatIsLeft_auth", scopes = {
            @AuthorizationScope(scope = "read:items", description = "read your items"),
            @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation succesful") })
    @RequestMapping(value = "/categories",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    public @ResponseBody ResponseEntity<List<Categories>> getCategories();


    @ApiOperation(value = "Find category by ID", nickname = "getCategoryById", notes = "Returns a single category", response = Categories.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Categories.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Category not found") })
    @RequestMapping(value = "/categories/{categoryId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    public @ResponseBody ResponseEntity<Categories> getCategoryById(@ApiParam(value = "ID of item to return", required = true) @PathVariable("categoryId") Long categoryId);

}
