/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.12).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Item;
import io.swagger.model.ModelApiResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-01T10:32:46.053Z")

@Api(value = "item", description = "the item API")
@RequestMapping
public interface ItemApi {

    @ApiOperation(value = "Add a new item", nickname = "addItem", notes = "Add an item", authorizations = {
        @Authorization(value = "whatIsLeft_auth", scopes = {
            @AuthorizationScope(scope = "read:items", description = "read your items"),
            @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Item is created"),
        @ApiResponse(code = 401, message = "Incorrect authorization provided"),
        @ApiResponse(code = 403, message = "Only logged users can add items"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/item",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    public ResponseEntity<Void> addItem(@ApiParam(value = "Pet object that needs to be added to the store" ,required=true )  @Valid @RequestBody Item body);

    @ApiOperation(value = "Find item by ID", nickname = "getItemById", notes = "Returns a single item", response = Item.class, authorizations = {
            @Authorization(value = "api_key")
    }, tags={ "item", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Item.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Item not found") })
    @RequestMapping(value = "/item/{itemId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    public ResponseEntity<Item> getItemById(@ApiParam(value = "ID of item to return",required=true) @PathVariable("itemId") Long itemId);


    @ApiOperation(value = "Updates an item with form data", nickname = "updateItemWithForm", notes = "", authorizations = {
            @Authorization(value = "whatIsLeft_auth", scopes = {
                    @AuthorizationScope(scope = "read:items", description = "read your items"),
                    @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "item", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Updated correctly"),
            @ApiResponse(code = 401, message = "Incorrect authorization provided"),
            @ApiResponse(code = 403, message = "Only offer owner can modify items"),
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/item/{itemId}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    public ResponseEntity<Void> updateItemWithForm(@ApiParam(value = "ID of item that needs to be updated",required=true) @PathVariable("itemId") Long itemId,@ApiParam(value = "Updated name of the item") @Valid @RequestBody Item body);


    @ApiOperation(value = "Deletes an item", nickname = "deleteItem", notes = "", authorizations = {
        @Authorization(value = "whatIsLeft_auth", scopes = {
            @AuthorizationScope(scope = "read:items", description = "read your items"),
            @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted correctly"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Incorrect authorization provided"),
        @ApiResponse(code = 403, message = "Only offer owner can delete items"),
        @ApiResponse(code = 404, message = "Item not found") })
    @RequestMapping(value = "/item/{itemId}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    public ResponseEntity<Void> deleteItem(@ApiParam(value = "Item id to delete",required=true) @PathVariable("itemId") Long itemId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Finds item by categories", nickname = "findItemByCategories", notes = "Muliple categories can be provided with comma separated strings. Use         cat1, cat2, cat3 for testing.", response = Item.class, responseContainer = "List", authorizations = {
        @Authorization(value = "whatIsLeft_auth", scopes = {
            @AuthorizationScope(scope = "read:items", description = "read your items"),
            @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Item.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid category value") })
    @RequestMapping(value = "/item/findByCategories",
        produces = { "application/json" },
        method = RequestMethod.GET)
    public ResponseEntity<List<Item>> findItemByCategories(@NotNull @ApiParam(value = "Categories to filter by", required = true) @Valid @RequestParam(value = "categories", required = true) List<String> categories);


    @ApiOperation(value = "Finds items by status", nickname = "findItemByStatus", notes = "Multiple status values can be provided with comma separated strings", response = Item.class, responseContainer = "List", authorizations = {
        @Authorization(value = "whatIsLeft_auth", scopes = {
            @AuthorizationScope(scope = "read:items", description = "read your items"),
            @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Item.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/item/findByStatus",
        produces = { "application/json" },
        method = RequestMethod.GET)
    public ResponseEntity<List<Item>> findItemByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, pending, sold") @Valid @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Uploads an image.", nickname = "uploadFile", notes = "", response = ModelApiResponse.class, authorizations = {
        @Authorization(value = "whatIsLeft_auth", scopes = {
            @AuthorizationScope(scope = "read:items", description = "read your items"),
            @AuthorizationScope(scope = "write:items", description = "modify items in your account")
            })
    }, tags={ "item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 401, message = "Incorrect authorization provided"),
        @ApiResponse(code = 403, message = "Only offer owner can modify items"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/item/{itemId}/uploadImage",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    public ResponseEntity<ModelApiResponse> uploadFile(@ApiParam(value = "ID of item to update",required=true) @PathVariable("itemId") Long itemId,@ApiParam(value = "file to upload") @Valid @RequestPart(value="file", required=true) MultipartFile file,@ApiParam(value = "Additional data to pass to server") @RequestParam(value="additionalMetadata", required=false)  String additionalMetadata);
}
